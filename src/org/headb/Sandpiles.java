/*
Copyright (c) 2008-2009 Bryan Head
All Rights Reserved

[This software is released under the "MIT License"]

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the
Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall
be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package org.headb;

import java.awt.Color;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.DefaultListModel;
import javax.swing.JColorChooser;
import java.io.*;

/**
 * A desktop program for viewing, manipulating, and simulating the sandpile
 * automata. This class is in charge of displaying everything in a frame and
 * displaying saving/loading and preferences dialogues.
 * @author Bryan Head
 */
public class Sandpiles extends javax.swing.JFrame {

    private final int SAVE_PROJECT = 0, LOAD_PROJECT = 1, SAVE_CONFIG = 2, LOAD_CONFIG = 3;
    private int fileAction = -1;
    private SandpilePreferences prefs;

    /** Creates new form Sandpiles */
    public Sandpiles() {
        initComponents();
        this.setTitle("Sandpiles - Untitled");
        prefs = SandpilePreferences.getPreferences();
        enactPreferences();
        updateBackgroundColorLabel();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        projectFileChooser = new javax.swing.JFileChooser();
        imageFileChooser = new javax.swing.JFileChooser(new File(System.getProperty("user.home")));
        preferencesDialog = new javax.swing.JDialog();
        preferencesTabbedPane = new javax.swing.JTabbedPane();
        colorPreferencesPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        colorPreferencesList = new javax.swing.JList();
        setColorButton = new javax.swing.JButton();
        addColorButton = new javax.swing.JButton();
        removeColorButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        backgroundColorLabel = new javax.swing.JLabel();
        setBackgroundColorButton = new javax.swing.JButton();
        preferencesDoneButton = new javax.swing.JButton();
        defaultPreferencesButton = new javax.swing.JButton();
        cancelPreferencesButton = new javax.swing.JButton();
        imageSizeDialog = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        imageSizeSlider = new javax.swing.JSlider();
        imageSizeTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        imageSizeOkButton = new javax.swing.JButton();
        imageSizeCancelButton = new javax.swing.JButton();
        sandpilesIP = new org.headb.SandpilesInteractionPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveProjectAsMenuItem = new javax.swing.JMenuItem();
        saveProjectMenuItem = new javax.swing.JMenuItem();
        openProjectMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItem1 = new javax.swing.JMenuItem();
        quitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        undoMenuItem = new javax.swing.JMenuItem();
        redoMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        copyMenuItem = new javax.swing.JMenuItem();
        cutMenuItem2 = new javax.swing.JMenuItem();
        pasteMenuItem3 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        jMenuItem2 = new javax.swing.JMenuItem();

        projectFileChooser.setAcceptAllFileFilterUsed(false);
        projectFileChooser.setDialogType(javax.swing.JFileChooser.CUSTOM_DIALOG);
        projectFileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        projectFileChooser.setFileFilter(new FileFilter(){
            public boolean accept(File file) {
                if(file!=null && file.isDirectory()){
                    for(String s : file.list()){
                        if(s.equals("graph.sg"))
                        return true;
                    }
                }
                return false;
            }
            public String getDescription(){
                return "Accepts directories that contain a graph.sg file.";
            }
        });
        projectFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectFileChooserActionPerformed(evt);
            }
        });

        imageFileChooser.setDialogTitle("Save Image");
        imageFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        imageFileChooser.setFileFilter(new FileFilter() {
            @Override public boolean accept(File f){
                return f.getName().endsWith(".png");
            }
            @Override public String getDescription(){
                return "PNG Image";
            }
        });
        imageFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageFileChooserActionPerformed(evt);
            }
        });

        preferencesDialog.setTitle("Preferences");
        preferencesDialog.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                preferencesDialogComponentHidden(evt);
            }
        });

        colorPreferencesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        colorPreferencesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(colorPreferencesList);

        setColorButton.setText("Set");
        setColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setColorButtonActionPerformed(evt);
            }
        });

        addColorButton.setText("Insert");
        addColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addColorButtonActionPerformed(evt);
            }
        });

        removeColorButton.setText("Remove");
        removeColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeColorButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Colors");

        backgroundColorLabel.setText("Background");

        setBackgroundColorButton.setText("Set");
        setBackgroundColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setBackgroundColorButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout colorPreferencesPanelLayout = new org.jdesktop.layout.GroupLayout(colorPreferencesPanel);
        colorPreferencesPanel.setLayout(colorPreferencesPanelLayout);
        colorPreferencesPanelLayout.setHorizontalGroup(
            colorPreferencesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(colorPreferencesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(colorPreferencesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(colorPreferencesPanelLayout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 394, Short.MAX_VALUE))
                    .add(colorPreferencesPanelLayout.createSequentialGroup()
                        .add(colorPreferencesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(colorPreferencesPanelLayout.createSequentialGroup()
                                .add(setColorButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(addColorButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(removeColorButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, Short.MAX_VALUE))
                            .add(jScrollPane1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 217, Short.MAX_VALUE)
                        .add(backgroundColorLabel)
                        .add(9, 9, 9)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(setBackgroundColorButton)
                .addContainerGap())
        );
        colorPreferencesPanelLayout.setVerticalGroup(
            colorPreferencesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(colorPreferencesPanelLayout.createSequentialGroup()
                .add(colorPreferencesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(colorPreferencesPanelLayout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(colorPreferencesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(setColorButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(addColorButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(removeColorButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(colorPreferencesPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(colorPreferencesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(setBackgroundColorButton)
                            .add(backgroundColorLabel))))
                .addContainerGap())
        );

        preferencesTabbedPane.addTab("Colors", colorPreferencesPanel);

        preferencesDoneButton.setText("Done");
        preferencesDoneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferencesDoneButtonActionPerformed(evt);
            }
        });

        defaultPreferencesButton.setText("Defaults");
        defaultPreferencesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultPreferencesButtonActionPerformed(evt);
            }
        });

        cancelPreferencesButton.setText("Cancel");
        cancelPreferencesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelPreferencesButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout preferencesDialogLayout = new org.jdesktop.layout.GroupLayout(preferencesDialog.getContentPane());
        preferencesDialog.getContentPane().setLayout(preferencesDialogLayout);
        preferencesDialogLayout.setHorizontalGroup(
            preferencesDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, preferencesTabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, preferencesDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(defaultPreferencesButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 283, Short.MAX_VALUE)
                .add(cancelPreferencesButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(preferencesDoneButton)
                .addContainerGap())
        );
        preferencesDialogLayout.setVerticalGroup(
            preferencesDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, preferencesDialogLayout.createSequentialGroup()
                .add(preferencesTabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(preferencesDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(preferencesDoneButton)
                    .add(defaultPreferencesButton)
                    .add(cancelPreferencesButton)))
        );

        imageSizeDialog.setTitle("Image Size");
        imageSizeDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        imageSizeDialog.setLocationByPlatform(true);

        jLabel2.setText("How big would you like the picture to be?");

        imageSizeSlider.setMaximum(1000);
        imageSizeSlider.setValue(100);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, imageSizeSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), imageSizeTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel3.setText("%");

        jLabel4.setText("0 x 0");

        imageSizeOkButton.setText("Ok");
        imageSizeOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageSizeOkButtonActionPerformed(evt);
            }
        });

        imageSizeCancelButton.setText("Cancel");
        imageSizeCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageSizeCancelButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout imageSizeDialogLayout = new org.jdesktop.layout.GroupLayout(imageSizeDialog.getContentPane());
        imageSizeDialog.getContentPane().setLayout(imageSizeDialogLayout);
        imageSizeDialogLayout.setHorizontalGroup(
            imageSizeDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(imageSizeDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(imageSizeDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, imageSizeDialogLayout.createSequentialGroup()
                        .add(imageSizeDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(imageSizeDialogLayout.createSequentialGroup()
                                .add(imageSizeOkButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(imageSizeCancelButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 168, Short.MAX_VALUE)
                                .add(jLabel4))
                            .add(imageSizeDialogLayout.createSequentialGroup()
                                .add(imageSizeSlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(imageSizeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 58, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel3)))
                .addContainerGap())
        );
        imageSizeDialogLayout.setVerticalGroup(
            imageSizeDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(imageSizeDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(imageSizeDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(imageSizeDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel3)
                        .add(imageSizeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(imageSizeSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(imageSizeDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(imageSizeDialogLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel4)
                        .addContainerGap(49, Short.MAX_VALUE))
                    .add(imageSizeDialogLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(imageSizeDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(imageSizeOkButton)
                            .add(imageSizeCancelButton))
                        .addContainerGap())))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileMenu.setText("File");

        saveProjectAsMenuItem.setText("Save Project as");
        saveProjectAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProjectAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveProjectAsMenuItem);

        saveProjectMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S,java.awt.Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() ));
        saveProjectMenuItem.setText("Save Project");
        saveProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProjectMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveProjectMenuItem);

        openProjectMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O,java.awt.Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() ));
        openProjectMenuItem.setText("Open Project");
        openProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openProjectMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openProjectMenuItem);
        fileMenu.add(jSeparator1);

        jMenuItem1.setText("Save as Image");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitMenuItem);

        jMenuBar1.add(fileMenu);

        editMenu.setText("Edit");

        undoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z,java.awt.Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() ));
        undoMenuItem.setText("Undo");
        undoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(undoMenuItem);

        redoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y,java.awt.Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() ));
        redoMenuItem.setText("Redo");
        redoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(redoMenuItem);
        editMenu.add(jSeparator2);

        copyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C,java.awt.Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() ));
        copyMenuItem.setText("Copy");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(copyMenuItem);

        cutMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X,java.awt.Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() ));
        cutMenuItem2.setMnemonic(KeyEvent.VK_X);
        cutMenuItem2.setText("Cut");
        cutMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItem2ActionPerformed(evt);
            }
        });
        editMenu.add(cutMenuItem2);

        pasteMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V,java.awt.Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() ));
        pasteMenuItem3.setMnemonic(KeyEvent.VK_V);
        pasteMenuItem3.setText("Paste");
        pasteMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItem3ActionPerformed(evt);
            }
        });
        editMenu.add(pasteMenuItem3);
        editMenu.add(jSeparator3);

        jMenuItem2.setText("Preferences");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        editMenu.add(jMenuItem2);

        jMenuBar1.add(editMenu);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(sandpilesIP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(sandpilesIP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        System.exit(0);
	}//GEN-LAST:event_quitMenuItemActionPerformed

	private void projectFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectFileChooserActionPerformed

        if (evt.getActionCommand().equals(projectFileChooser.APPROVE_SELECTION)) {
            boolean success = true;
            switch (fileAction) {
                case SAVE_PROJECT:
                    this.sandpilesIP.getSandpileController().saveGraphProject(projectFileChooser.getSelectedFile());
                    break;
                case LOAD_PROJECT:
                    success = this.sandpilesIP.getSandpileController().loadGraphProject(projectFileChooser.getSelectedFile());
                    break;
                case SAVE_CONFIG:
                    this.sandpilesIP.getSandpileController().saveConfig(projectFileChooser.getSelectedFile());
                    break;
                case LOAD_CONFIG:
                    this.sandpilesIP.getSandpileController().loadCurrentConfig(projectFileChooser.getSelectedFile());
                    break;
            }
            if (!success) {
                javax.swing.JOptionPane.showMessageDialog(this,
                        "That's not a valid Sandpiles project. Sandpiles project directories must contain a graph.sg file.",
                        "Invalid Project Directory", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
        fileAction = -1;
        this.setTitle("Sandpiles - " + sandpilesIP.getSandpileController().getProjectTitle());
}//GEN-LAST:event_projectFileChooserActionPerformed

	private void saveProjectAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProjectAsMenuItemActionPerformed
        fileAction = SAVE_PROJECT;
        this.projectFileChooser.showSaveDialog(this);
        this.sandpilesIP.updateConfigSelectList();
}//GEN-LAST:event_saveProjectAsMenuItemActionPerformed

	private void openProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openProjectMenuItemActionPerformed
        fileAction = LOAD_PROJECT;
        this.projectFileChooser.showOpenDialog(this);
        this.sandpilesIP.updateConfigSelectList();
}//GEN-LAST:event_openProjectMenuItemActionPerformed

	private void saveProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProjectMenuItemActionPerformed
        if (this.sandpilesIP.getSandpileController().hasProjectFile()) {
            this.sandpilesIP.getSandpileController().saveGraphProject();
        } else {
            saveProjectAsMenuItemActionPerformed(evt);
        }
        this.sandpilesIP.updateConfigSelectList();
	}//GEN-LAST:event_saveProjectMenuItemActionPerformed

	private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
        sandpilesIP.copySelectedToClipboard();
	}//GEN-LAST:event_copyMenuItemActionPerformed

	private void cutMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItem2ActionPerformed
        sandpilesIP.cutSelectedToClipBoard();
	}//GEN-LAST:event_cutMenuItem2ActionPerformed

	private void pasteMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItem3ActionPerformed
        sandpilesIP.pasteVertexDataFromClipboard();
	}//GEN-LAST:event_pasteMenuItem3ActionPerformed

	private void undoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMenuItemActionPerformed
        try {
            sandpilesIP.getSandpileController().undoManager.undo();
        } catch (javax.swing.undo.CannotUndoException e) {
            java.awt.Toolkit.getDefaultToolkit().beep();
        }
	}//GEN-LAST:event_undoMenuItemActionPerformed

	private void redoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoMenuItemActionPerformed
        try {
            sandpilesIP.getSandpileController().undoManager.redo();
        } catch (javax.swing.undo.CannotRedoException e) {
            java.awt.Toolkit.getDefaultToolkit().beep();
        }
	}//GEN-LAST:event_redoMenuItemActionPerformed

	private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        imageSizeDialog.setSize(400,150);
        imageSizeDialog.setVisible(true);
	}//GEN-LAST:event_jMenuItem1ActionPerformed

	private void imageFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageFileChooserActionPerformed
        float scale = ((float) imageSizeSlider.getValue()) / 100f;
        sandpilesIP.setWaitCursor();
        if (evt.getActionCommand().equals(imageFileChooser.APPROVE_SELECTION)) {
            File file = imageFileChooser.getSelectedFile();
            BufferedImage image = sandpilesIP.getCanvasShot(scale);
            saveImage(image, file);
        }
        sandpilesIP.setDefaultCursor();
	}//GEN-LAST:event_imageFileChooserActionPerformed

	private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        preferencesDialog.setSize(600, 400);
        preferencesDialog.setLocationRelativeTo(this);
        updateColorPreferencesList();
        this.preferencesDialog.setVisible(true);
	}//GEN-LAST:event_jMenuItem2ActionPerformed

	private void setColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setColorButtonActionPerformed
        int index = colorPreferencesList.getSelectedIndex();
        if (index < 0) {
            return;
        }
        DefaultListModel model = (DefaultListModel) colorPreferencesList.getModel();
        Color defaultColor = (Color) model.getElementAt(index);
        Color newColor = getColor(defaultColor);
        if (newColor != null) {
            prefs.getColors().setRow(index, newColor.getRGBColorComponents(null));
        }
        //model.set(colorPreferencesList.getSelectedIndex(), newColor);
        //updateColorPreferences();
        updateColorPreferencesList();
        enactPreferences();
	}//GEN-LAST:event_setColorButtonActionPerformed

	private void preferencesDoneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesDoneButtonActionPerformed
        this.preferencesDialog.setVisible(false);
        this.sandpilesIP.requestFocus();

	}//GEN-LAST:event_preferencesDoneButtonActionPerformed

	private void preferencesDialogComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_preferencesDialogComponentHidden
        if (!prefs.save()) {
            JOptionPane.showMessageDialog(this, "Unable to save preferences. Perhaps this program doesn't have permissions to write to its own directory.");
        } else {
            System.err.println("Preferences saved");
        }
	}//GEN-LAST:event_preferencesDialogComponentHidden

	private void addColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addColorButtonActionPerformed
        int index = colorPreferencesList.getSelectedIndex();
        DefaultListModel model = (DefaultListModel) colorPreferencesList.getModel();
        Color defaultColor;
        if (index < 0) {
            index = colorPreferencesList.getModel().getSize();
            defaultColor = (Color) model.getElementAt(index - 1);
        } else {
            defaultColor = (Color) model.getElementAt(index);
        }
        Color newColor = getColor(defaultColor);
        if (newColor != null) {
            prefs.getColors().insertRow(index, newColor.getRGBColorComponents(null));
        }
        //model.add(index, newColor);
        //updateColorPreferences();
        updateColorPreferencesList();
        enactPreferences();
	}//GEN-LAST:event_addColorButtonActionPerformed

	private void removeColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeColorButtonActionPerformed
        int index = colorPreferencesList.getSelectedIndex();
        DefaultListModel model = (DefaultListModel) colorPreferencesList.getModel();
        if (index < 0 || model.getSize() <= 1) {
            return;
        }
        prefs.getColors().removeRow(index);
        updateColorPreferencesList();
        enactPreferences();
	}//GEN-LAST:event_removeColorButtonActionPerformed

	private void defaultPreferencesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultPreferencesButtonActionPerformed
        this.prefs = new SandpilePreferences();
        updateColorPreferencesList();
        updateBackgroundColorLabel();
        enactPreferences();
	}//GEN-LAST:event_defaultPreferencesButtonActionPerformed

	private void setBackgroundColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setBackgroundColorButtonActionPerformed
        Color defaultColor = backgroundColorLabel.getBackground();
        Color newColor = getColor(defaultColor);
        prefs.setBackgroundColor(newColor.getRGBColorComponents(null));
        updateBackgroundColorLabel();
        enactPreferences();
	}//GEN-LAST:event_setBackgroundColorButtonActionPerformed

	private void cancelPreferencesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelPreferencesButtonActionPerformed
        prefs = SandpilePreferences.getPreferences();
        enactPreferences();
        this.preferencesDialog.setVisible(false);
        this.sandpilesIP.requestFocus();
	}//GEN-LAST:event_cancelPreferencesButtonActionPerformed

    private void imageSizeCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageSizeCancelButtonActionPerformed
        imageSizeDialog.setVisible(false);
    }//GEN-LAST:event_imageSizeCancelButtonActionPerformed

    private void imageSizeOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageSizeOkButtonActionPerformed
        imageSizeDialog.setVisible(false);
        imageFileChooser.showSaveDialog(this);
        
    }//GEN-LAST:event_imageSizeOkButtonActionPerformed

    public boolean saveImage(BufferedImage img, File file){
        try {
            ImageIO.write(img, "png", file);
            return true;
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Unable to write image: " + e.getMessage());
            return false;
        }
    }
    private void updateColorPreferencesList() {
        ColorListCellRenderer cellRenderer = new ColorListCellRenderer(0, 1);
        cellRenderer.setColors(this.prefs.getColors());
        DefaultListModel colorModel = new DefaultListModel();
        for (int i = 0; i < prefs.getColors().rows(); i++) {
            colorModel.addElement(new Color(prefs.getColors().get(i, 0), prefs.getColors().get(i, 1), prefs.getColors().get(i, 2)));
        }
        colorPreferencesList.setModel(colorModel);
        colorPreferencesList.setCellRenderer(cellRenderer);
    }

    private void enactPreferences() {
        sandpilesIP.setColors(prefs.getColors(), prefs.getInDebtColors(), prefs.getBackgroundColor());
        sandpilesIP.getSandpileController().repaint();
    }

    private void updateBackgroundColorLabel() {
        backgroundColorLabel.setOpaque(true);
        float[] colorArray = prefs.getBackgroundColor();
        Color foreground;
        if (colorArray[0] + colorArray[1] + colorArray[2] > 0.5f) {
            foreground = Color.BLACK;
        } else {
            foreground = Color.WHITE;
        }
        Color background = new Color(colorArray[0], colorArray[1], colorArray[2]);
        backgroundColorLabel.setBackground(background);
        backgroundColorLabel.setForeground(foreground);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            // Set System L&F
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (javax.swing.UnsupportedLookAndFeelException e) {
            // handle exception
        } catch (ClassNotFoundException e) {
            // handle exception
        } catch (InstantiationException e) {
            // handle exception
        } catch (IllegalAccessException e) {
            // handle exception
        }

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Sandpiles().setVisible(true);
            }
        });
    }

    private Color getColor(Color defaultColor) {
        return JColorChooser.showDialog(colorPreferencesPanel, "Pick a color", defaultColor);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addColorButton;
    private javax.swing.JLabel backgroundColorLabel;
    private javax.swing.JButton cancelPreferencesButton;
    private javax.swing.JList colorPreferencesList;
    private javax.swing.JPanel colorPreferencesPanel;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem2;
    private javax.swing.JButton defaultPreferencesButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JFileChooser imageFileChooser;
    private javax.swing.JButton imageSizeCancelButton;
    private javax.swing.JDialog imageSizeDialog;
    private javax.swing.JButton imageSizeOkButton;
    private javax.swing.JSlider imageSizeSlider;
    private javax.swing.JTextField imageSizeTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JMenuItem openProjectMenuItem;
    private javax.swing.JMenuItem pasteMenuItem3;
    private javax.swing.JDialog preferencesDialog;
    private javax.swing.JButton preferencesDoneButton;
    private javax.swing.JTabbedPane preferencesTabbedPane;
    private javax.swing.JFileChooser projectFileChooser;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JMenuItem redoMenuItem;
    private javax.swing.JButton removeColorButton;
    private org.headb.SandpilesInteractionPanel sandpilesIP;
    private javax.swing.JMenuItem saveProjectAsMenuItem;
    private javax.swing.JMenuItem saveProjectMenuItem;
    private javax.swing.JButton setBackgroundColorButton;
    private javax.swing.JButton setColorButton;
    private javax.swing.JMenuItem undoMenuItem;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
